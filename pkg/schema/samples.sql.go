// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: samples.sql

package schema

import (
	"context"

	"github.com/google/uuid"
)

const findSample = `-- name: FindSample :one
SELECT id, name, created_at, updated_at, deleted FROM samples WHERE id = $1
`

func (q *Queries) FindSample(ctx context.Context, id uuid.UUID) (Sample, error) {
	row := q.db.QueryRow(ctx, findSample, id)
	var i Sample
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Deleted,
	)
	return i, err
}

const insertSample = `-- name: InsertSample :one
INSERT INTO samples (name) VALUES ($1) RETURNING id, name, created_at, updated_at, deleted
`

func (q *Queries) InsertSample(ctx context.Context, name string) (Sample, error) {
	row := q.db.QueryRow(ctx, insertSample, name)
	var i Sample
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Deleted,
	)
	return i, err
}

const selectSample = `-- name: SelectSample :many
SELECT id, name, created_at, updated_at, deleted FROM samples
`

func (q *Queries) SelectSample(ctx context.Context) ([]Sample, error) {
	rows, err := q.db.Query(ctx, selectSample)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sample
	for rows.Next() {
		var i Sample
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Deleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
